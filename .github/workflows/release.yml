name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        #   - platform: 'macos-latest' # for Arm based macs (M1 and above).
        #     args: '--target aarch64-apple-darwin'
        #   - platform: 'macos-latest' # for Intel based macs.
        #     args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: '-b=deb,updater'
        #   - platform: 'windows-latest'
        #     args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.15.3'
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true
      
      # Etapa para criar o JSON e fazer upload para o Gist
      - name: Create updater JSON and upload to Gist
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          VERSION=$(grep -Po '"version": "\K[^"]*' src-tauri/tauri.conf.json)
          echo "Versão encontrada: $VERSION"
          
          # Verificar se o arquivo .sig existe
          SIG_PATH="src-tauri/target/release/bundle/deb/capitu-desktop_${VERSION}_amd64.deb.sig"
          if [ -f "$SIG_PATH" ]; then
            echo "Arquivo de assinatura encontrado: $SIG_PATH"
            SIG_CONTENT=$(cat "$SIG_PATH")
          else
            echo "Arquivo de assinatura não encontrado. Listando arquivos disponíveis:"
            find src-tauri/target/release/bundle -type f -name "*.sig" | xargs ls -la
            exit 1
          fi
          
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/capitu-desktop_${VERSION}_amd64.deb"
          
          echo '{
            "version": "'$VERSION'",
            "notes": "See the assets to download this version and install.",
            "pub_date": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'",
            "platforms": {
              "linux-x86_64": {
                "signature": "'$SIG_CONTENT'",
                "url": "'$RELEASE_URL'"
              }
            }
          }' > capituai-latest.json
          
          # Verificar se o gh CLI está disponível
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI não encontrado, instalando..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          echo "Atualizando Gist com o arquivo de atualização..."
          cat capituai-latest.json
          
          # Usar token GH_PAT diretamente com o comando gh auth
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
          gh gist edit 440882f379e50d1ab465760193805cc9 capituai-latest.json